{"version":3,"sources":["../../../src/public/js/infoBankWraper.js"],"names":["template","document","createElement","innerHTML","TodoItem","_shadowRoot","attachShadow","appendChild","content","cloneNode","$item","querySelector","$removeButton","$text","$checkbox","addEventListener","e","dispatchEvent","CustomEvent","detail","index","hasAttribute","setAttribute","_renderTodoItem","classList","add","remove","removeAttribute","_text","name","oldValue","newValue","HTMLElement","window","customElements","define"],"mappings":";;;;;;;;;;AAAA,IAAMA,WAAWC,SAASC,aAAT,CAAuB,UAAvB,CAAjB;AACAF,SAASG,SAAT;;IAuBMC,Q;;;AACF,wBAAc;AAAA;;AAAA;;AAEV,cAAKC,WAAL,GAAmB,MAAKC,YAAL,CAAkB,EAAC,QAAQ,MAAT,EAAlB,CAAnB;AACA,cAAKD,WAAL,CAAiBE,WAAjB,CAA6BP,SAASQ,OAAT,CAAiBC,SAAjB,CAA2B,IAA3B,CAA7B;;AAEA,cAAKC,KAAL,GAAa,MAAKL,WAAL,CAAiBM,aAAjB,CAA+B,OAA/B,CAAb;AACA,cAAKC,aAAL,GAAqB,MAAKP,WAAL,CAAiBM,aAAjB,CAA+B,QAA/B,CAArB;AACA,cAAKE,KAAL,GAAa,MAAKR,WAAL,CAAiBM,aAAjB,CAA+B,OAA/B,CAAb;AACA,cAAKG,SAAL,GAAiB,MAAKT,WAAL,CAAiBM,aAAjB,CAA+B,OAA/B,CAAjB;;AAEA,cAAKC,aAAL,CAAmBG,gBAAnB,CAAoC,OAApC,EAA6C,UAACC,CAAD,EAAO;AAChD,kBAAKC,aAAL,CAAmB,IAAIC,WAAJ,CAAgB,UAAhB,EAA4B,EAACC,QAAQ,MAAKC,KAAd,EAA5B,CAAnB;AACH,SAFD;;AAIA,cAAKN,SAAL,CAAeC,gBAAf,CAAgC,OAAhC,EAAyC,UAACC,CAAD,EAAO;AAC5C,kBAAKC,aAAL,CAAmB,IAAIC,WAAJ,CAAgB,UAAhB,EAA4B,EAACC,QAAQ,MAAKC,KAAd,EAA5B,CAAnB;AACH,SAFD;AAdU;AAiBb;;;;4CAEmB;AAChB;AACA;AACA,gBAAI,CAAC,KAAKC,YAAL,CAAkB,MAAlB,CAAL,EAAgC;AAC5B,qBAAKC,YAAL,CAAkB,MAAlB,EAA0B,aAA1B;AACH;;AAED,iBAAKC,eAAL;AACH;;;0CAEiB;AACd,gBAAI,KAAKF,YAAL,CAAkB,SAAlB,CAAJ,EAAkC;AAC9B,qBAAKX,KAAL,CAAWc,SAAX,CAAqBC,GAArB,CAAyB,WAAzB;AACA,qBAAKX,SAAL,CAAeQ,YAAf,CAA4B,SAA5B,EAAuC,EAAvC;AACH,aAHD,MAGO;AACH,qBAAKZ,KAAL,CAAWc,SAAX,CAAqBE,MAArB,CAA4B,WAA5B;AACA,qBAAKZ,SAAL,CAAea,eAAf,CAA+B,SAA/B;AACH;;AAED,iBAAKd,KAAL,CAAWV,SAAX,GAAuB,KAAKyB,KAA5B;AACH;;;iDAMwBC,I,EAAMC,Q,EAAUC,Q,EAAU;AAC/C,iBAAKH,KAAL,GAAaG,QAAb;AACH;;;4BAN+B;AAC5B,mBAAO,CAAC,MAAD,CAAP;AACH;;;;EA5CkBC,W;;AAmDvBC,OAAOC,cAAP,CAAsBC,MAAtB,CAA6B,YAA7B,EAA2C/B,QAA3C","file":"infoBankWraper.js","sourcesContent":["const template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n    display: block;\n    font-family: sans-serif;\n    }\n\n    .completed {\n    text-decoration: line-through;\n    }\n\n    button {\n    border: none;\n    cursor: pointer;\n    }\n</style>\n<li class=\"item\">\n    <input type=\"checkbox\">\n    <label></label>\n    <button>‚ùå</button>\n</li>\n`;\n\nclass TodoItem extends HTMLElement {\n    constructor() {\n        super();\n        this._shadowRoot = this.attachShadow({'mode': 'open'});\n        this._shadowRoot.appendChild(template.content.cloneNode(true));\n\n        this.$item = this._shadowRoot.querySelector('.item');\n        this.$removeButton = this._shadowRoot.querySelector('button');\n        this.$text = this._shadowRoot.querySelector('label');\n        this.$checkbox = this._shadowRoot.querySelector('input');\n\n        this.$removeButton.addEventListener('click', (e) => {\n            this.dispatchEvent(new CustomEvent('onRemove', {detail: this.index}));\n        });\n\n        this.$checkbox.addEventListener('click', (e) => {\n            this.dispatchEvent(new CustomEvent('onToggle', {detail: this.index}));\n        });\n    }\n\n    connectedCallback() {\n        // We set a default attribute here; if our end user hasn't provided one,\n        // our element will display a \"placeholder\" text instead.\n        if (!this.hasAttribute('text')) {\n            this.setAttribute('text', 'placeholder');\n        }\n\n        this._renderTodoItem();\n    }\n\n    _renderTodoItem() {\n        if (this.hasAttribute('checked')) {\n            this.$item.classList.add('completed');\n            this.$checkbox.setAttribute('checked', '');\n        } else {\n            this.$item.classList.remove('completed');\n            this.$checkbox.removeAttribute('checked');\n        }\n\n        this.$text.innerHTML = this._text;\n    }\n\n    static get observedAttributes() {\n        return ['text'];\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this._text = newValue;\n    }\n}\n\nwindow.customElements.define('to-do-item', TodoItem);\n"]}